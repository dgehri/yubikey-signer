name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  discussions: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Changes in ${{ steps.get_version.outputs.VERSION }}

            ### Installation

            Download the appropriate binary for your platform:
            - **Windows**: `yubikey-signer-x86_64-pc-windows-msvc.exe`
            - **Linux**: `yubikey-signer-x86_64-unknown-linux-gnu`
            - **macOS (Intel)**: `yubikey-signer-x86_64-apple-darwin`
            - **macOS (Apple Silicon)**: `yubikey-signer-aarch64-apple-darwin`

            ### Usage
            ```bash
            # Sign a PE file with your YubiKey
            yubikey-signer sign --input myapp.exe --output myapp-signed.exe --pin <your-pin>

            # Add timestamp server for enhanced verification
            yubikey-signer sign --input myapp.exe --output myapp-signed.exe --pin <your-pin> --timestamp-url http://timestamp.digicert.com
            ```

            ### Requirements
            - YubiKey with PIV capability
            - Certificate loaded in the specified slot
            - PC/SC service running (Windows: Smart Card service, Linux: pcscd, macOS: built-in)

            See the README for detailed setup instructions.
          draft: false
          prerelease: false

  build-release:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-suffix: .exe
            asset-name: yubikey-signer-x86_64-pc-windows-msvc.exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-suffix: ""
            asset-name: yubikey-signer-x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-suffix: ""
            asset-name: yubikey-signer-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-suffix: ""
            asset-name: yubikey-signer-aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libpcsclite-dev
          # Note: Not installing libssl-dev - we use vendored OpenSSL

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config pcsc-lite
          # Note: Not installing openssl - we use vendored OpenSSL

      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: "ee0973d8090e4e3e452244bb50d34c25fe907dc2" # Latest stable (2025-08-18)

      - name: Install OpenSSL via vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install openssl:x64-windows-static-md
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" >> $env:GITHUB_ENV

      - name: Set OpenSSL vendored feature (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV

      - name: Build release binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows: Use static vcpkg OpenSSL to avoid DLL dependencies
            cargo build --release --target ${{ matrix.target }} --features static-openssl
          else
            # Linux/macOS: Use vendored OpenSSL
            cargo build --release --target ${{ matrix.target }} --features vendored-openssl
          fi
        shell: bash

      - name: Prepare release asset
        shell: bash
        run: |
          binary_path="target/${{ matrix.target }}/release/yubikey-signer${{ matrix.binary-suffix }}"
          if [ ! -f "$binary_path" ]; then
            echo "Binary not found at $binary_path"
            ls -la target/${{ matrix.target }}/release/
            exit 1
          fi

          # Copy binary to root with target-specific name
          cp "$binary_path" "${{ matrix.asset-name }}"

          # Verify the binary works
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./${{ matrix.asset-name }} --version
          else
            ./${{ matrix.asset-name }} --version
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.asset-name }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libpcsclite-dev
          # Note: Not installing libssl-dev - we use vendored OpenSSL

      - name: Set OpenSSL environment for publishing
        run: |
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true # Don't fail the release if crate publishing fails
