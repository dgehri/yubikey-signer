name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  discussions: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  prepare-release:
    name: Prepare Release Metadata
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      should_release: ${{ steps.evaluate.outputs.should_release }}
    steps:
      - uses: actions/checkout@v5
      - id: meta
        name: Read version from Cargo.toml
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - id: evaluate
        name: Decide if new tag needed
        run: |
          if git rev-parse -q --verify "refs/tags/v${{ steps.meta.outputs.version }}"; then
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Create & push tag
        run: |
          git tag v${{ needs.prepare-release.outputs.version }}
          git push origin v${{ needs.prepare-release.outputs.version }}

  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [prepare-release, create-tag]
    if: needs.prepare-release.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-suffix: .exe
            asset-name: yubikey-signer-x86_64-pc-windows-msvc.exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-suffix: ""
            asset-name: yubikey-signer-x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-suffix: ""
            asset-name: yubikey-signer-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-suffix: ""
            asset-name: yubikey-signer-aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libpcsclite-dev
          # Note: Not installing libssl-dev - we use vendored OpenSSL

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config pcsc-lite
          # Note: Not installing openssl - we use vendored OpenSSL

      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: "ee0973d8090e4e3e452244bb50d34c25fe907dc2" # Latest stable (2025-08-18)

      - name: Install OpenSSL via vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install openssl:x64-windows-static-md

      - name: Set OpenSSL vendored feature (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV

      - name: Build release binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows: Use static vcpkg OpenSSL to avoid DLL dependencies
            cargo build --release --target ${{ matrix.target }} --features static-openssl
          else
            # Linux/macOS: Use vendored OpenSSL
            cargo build --release --target ${{ matrix.target }} --features vendored-openssl
          fi
        shell: bash

      - name: Prepare release asset
        shell: bash
        run: |
          binary_path="target/${{ matrix.target }}/release/yubikey-signer${{ matrix.binary-suffix }}"
          if [ ! -f "$binary_path" ]; then
            echo "Binary not found at $binary_path"
            ls -la target/${{ matrix.target }}/release/
            exit 1
          fi

          # Copy binary to root with target-specific name
          cp "$binary_path" "${{ matrix.asset-name }}"

          # Verify the binary works
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./${{ matrix.asset-name }} --version
          else
            ./${{ matrix.asset-name }} --version
          fi

      - name: Upload Release Asset (deferred)
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.target }}
          path: ${{ matrix.asset-name }}

  create-release:
    name: Create GitHub Release & Publish
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    if: needs.prepare-release.outputs.should_release == 'true'
    permissions:
      contents: write
      discussions: write
    steps:
      - uses: actions/checkout@v5
      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: Release v${{ needs.prepare-release.outputs.version }}
          files: dist/**/yubikey-signer*
          body: |
            ## Release v${{ needs.prepare-release.outputs.version }}
            Binaries for Windows, Linux, and macOS (Intel & Apple Silicon).
            See README for usage instructions.
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --token $CARGO_REGISTRY_TOKEN
